{"ast":null,"code":"var _jsxFileName = \"D:\\\\VScode\\\\\\u9879\\u76EE\\\\myreactstudy\\\\ReactStudy\\\\day05\\\\src\\\\hooks\\\\useCallback\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, memo, useCallback } from 'react';\n\n// function Son() {\n//   console.log('渲染了');\n//   return (\n//     <div>\n//       <h2>Son 组件</h2>\n//     </div>\n//   );\n// }\n\n// memo 可以解决组件的重复渲染\n// 高阶组件 将组件作为一个参数并且返回一个新的组件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Son = /*#__PURE__*/memo(_c = function (props) {\n  console.log('Son渲染了'); //传递 function 过来的时候 依然重复渲染了\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Son \\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n});\n_c2 = Son;\nexport default function App() {\n  _s();\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('张三');\n  const change = name => {\n    setName(name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Son, {\n      name: name,\n      onClick: change\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n/* \r\n  memo props 进行的浅比较 （根据内存地址）\r\n*/\n_s(App, \"wIuCKS3TXS0zMvPFxQ+2UK0aT8Y=\");\n_c3 = App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Son$memo\");\n$RefreshReg$(_c2, \"Son\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","memo","useCallback","jsxDEV","_jsxDEV","Son","_c","props","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","name","_c2","App","_s","count","setCount","setName","change","onClick","_c3","$RefreshReg$"],"sources":["D:/VScode/项目/myreactstudy/ReactStudy/day05/src/hooks/useCallback/App.js"],"sourcesContent":["import React, { useState, memo, useCallback } from 'react';\r\n\r\n// function Son() {\r\n//   console.log('渲染了');\r\n//   return (\r\n//     <div>\r\n//       <h2>Son 组件</h2>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// memo 可以解决组件的重复渲染\r\n// 高阶组件 将组件作为一个参数并且返回一个新的组件\r\nconst Son = memo(function (props) {\r\n  console.log('Son渲染了'); //传递 function 过来的时候 依然重复渲染了\r\n  return (\r\n    <div>\r\n      <h2>Son 组件</h2>\r\n      <h2>{props.name}</h2>\r\n    </div>\r\n  );\r\n});\r\nexport default function App() {\r\n  const [count, setCount] = useState(0);\r\n  const [name, setName] = useState('张三');\r\n  const change = (name) => {\r\n    setName(name);\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>{count}</h1>\r\n      {/* 每次调用 setCount 都会重新渲染父组件，从而渲染子组件 */}\r\n      <button onClick={() => setCount(count + 1)}>Add</button>\r\n      <Son name={name} onClick={change} />\r\n    </div>\r\n  );\r\n}\r\n/* \r\n  memo props 进行的浅比较 （根据内存地址）\r\n*/\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,QAAQ,OAAO;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,gBAAGJ,IAAI,CAAAK,EAAA,GAAC,SAAAA,CAAUC,KAAK,EAAE;EAChCC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;EACvB,oBACEL,OAAA;IAAAM,QAAA,gBACEN,OAAA;MAAAM,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACfV,OAAA;MAAAM,QAAA,EAAKH,KAAK,CAACQ;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV,CAAC,CAAC;AAACE,GAAA,GARGX,GAAG;AAST,eAAe,SAASY,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACe,IAAI,EAAEM,OAAO,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMsB,MAAM,GAAIP,IAAI,IAAK;IACvBM,OAAO,CAACN,IAAI,CAAC;EACf,CAAC;EACD,oBACEX,OAAA;IAAAM,QAAA,gBACEN,OAAA;MAAAM,QAAA,EAAKS;IAAK;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEhBV,OAAA;MAAQmB,OAAO,EAAEA,CAAA,KAAMH,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;MAAAT,QAAA,EAAC;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxDV,OAAA,CAACC,GAAG;MAACU,IAAI,EAAEA,IAAK;MAACQ,OAAO,EAAED;IAAO;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV;AACA;AACA;AACA;AAFAI,EAAA,CAfwBD,GAAG;AAAAO,GAAA,GAAHP,GAAG;AAAA,IAAAX,EAAA,EAAAU,GAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAnB,EAAA;AAAAmB,YAAA,CAAAT,GAAA;AAAAS,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}